# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
global !p
def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"
def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z0-9><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]
def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]
def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]
endglobal

snippet lam "Lambda (no arguments)"
() -> $0${VISUAL}
endsnippet

snippet lam "Lambda (1 argument)"
${1:x} -> $0${VISUAL}
endsnippet

snippet lam "Lambda (2 arguments)"
(${1:x}, ${2:y}) -> $0${VISUAL}
endsnippet

snippet lam "Lambda (3 arguments)" 
(${1:x}, ${2:y}, ${3:z}) -> $0${VISUAL}
endsnippet

snippet lamb "Lambda (with body, no arguments)"
() -> {
	$0${VISUAL}
}
endsnippet

snippet lamb "Lambda (with body, 1 argument)" 
${1:x} -> {
	$0${VISUAL}
}
endsnippet

snippet lamb "Lambda (with body, 2 arguments)" 
(${1:x}, ${2:y}) -> {
	$0${VISUAL}
}
endsnippet

snippet lamb "Lambda (with body, 3 arguments)"
(${1:x}, ${2:y}, ${3:z}) -> {
	$0${VISUAL}
}
endsnippet

snippet optional "Optional.ofNullable()"
Optional.ofNullable(${1:${VISUAL:x}})
	${2:.map(${3:it -> ${4:it.}})}
	${5:.ifPresent(${6:it -> ${7:it.}})}
endsnippet

snippet option "Option.of()" b
Option.of(${1:${VISUAL:x}})
endsnippet

snippet option "Option.of().map().peek()" b
Option.of(${1:${VISUAL:x}})
	${2:.map(${3:it -> ${4:it.}})}
	${5:.peek(${6:it -> ${7:it.}})}
endsnippet

snippet logger "Logger" b
private static final Logger logger = Logger.getLogger(${1:`!p snip.rv = snip.basename or "ClassName"`}.class.getName());
endsnippet

snippet logTh "Log Throwable" 
${1:logger}.log(Level.SEVERE, "${2:message}", ${3:${VISUAL:throwable}});
endsnippet

snippet logEx "Log Exception" 
${1:logger}.log(Level.SEVERE, "${2:message}", ${3:${VISUAL:e}});
endsnippet

snippet sleep "try sleep catch" b
try {
	Thread.sleep(${1:1000});
} catch (InterruptedException e) {
	${2:e.printStackTrace()};
}
endsnippet

snippet /o|v/ "new Object or variable" br
${1:Object} ${2:var} = new $1($3);
endsnippet

snippet field "field" b
${1:private} ${2:String} ${3:`!p snip.rv = mixedCase(t[2])`};
endsnippet

snippet abstract "abstract" b
abstract $0
endsnippet

snippet assert "assert" b
assert ${1:test}${2/(.+)/(?1: \: ")/}${2:Failure message}${2/(.+)/(?1:")/};
endsnippet

snippet assertTrue "assert true" b
assertTrue(${1:actual});
endsnippet

snippet assertFalse "assert false" b
assertFalse(${1:actual});
endsnippet

snippet assertEquals "assert equals" b
assertEquals(${1:expected}, ${2:actual});
endsnippet

snippet br "break" b
break;
endsnippet

snippet cs "case" b
case $1:
	$2
$0
endsnippet

snippet ca "catch"
catch (${1:Exception} ${2:e})`!p nl(snip)`{
	$0
}
endsnippet

snippet cle "class extends" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }${4:implements ${5:Interface} }{
	$0
}
endsnippet

snippet cli "class implements" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} ${2:implements ${3:Interface} }{
	$0
}
endsnippet

snippet clc "class with constructor, final fields, and getters" b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tprivate final " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis." + i[1] + " = " + i[1] + ";"
if len(args) == 0:
	snip.rv += "\n"`
	}$0
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tpublic " + i[0] + " get" + camel(i[1]) + "() {\n\
	\treturn " + i[1] + ";\n\t}\n"
`
}
endsnippet

snippet clc "class with constructor, fields, setter and getters" b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis." + i[1] + " = " + i[1] + ";"
if len(args) == 0:
	snip.rv += "\n"`
	}$0
`!p
args = getArgs(t[1])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tpublic void set" + camel(i[1]) + "(" + i[0] + " " + i[1] + ") {\n" + "\
	\tthis." + i[1] + " = " + i[1] + ";\n\t}\n"
	snip.rv += "\n\tpublic " + i[0] + " get" + camel(i[1]) + "() {\n\
	\treturn " + i[1] + ";\n\t}\n"
`
}
endsnippet

snippet clc "class with constructor, with field names" b
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
	}
}
endsnippet

snippet clc "class and constructor" b
public class `!p
snip.rv = snip.basename or "untitled"` {

	public `!p snip.rv = snip.basename or "untitled"`($2) {
		$0
	}
}
endsnippet

snippet cl "class" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} {
	$0
}
endsnippet

snippet cos "constant string" b
public static final String ${1:var} = "$2";$0
endsnippet

snippet co "constant" b
public static final ${1:String} ${2:var} = $3;$0
endsnippet

snippet de "default" b
default:
	$0
endsnippet

snippet elif "else if"
else if ($1)`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet el "else" w
else`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet fi "final" b
final $0
endsnippet

snippet fore "for (each)" b
for ($1 : $2)`!p nl(snip)`{
	$0
}
endsnippet

snippet fori "for" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++)`!p nl(snip)`{
	$0
}
endsnippet

snippet for "for" b
for ($1; $2; $3)`!p nl(snip)`{
	$0
}
endsnippet

snippet if "if" b
if ($1)`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet imt "import junit_framework_TestCase;"  b
import junit.framework.TestCase;
$0
endsnippet


snippet im "import"  b
import ${1:java}.${2:util}.$0;
endsnippet

snippet in "interface" b
interface ${1:`!p snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }{
	$0
}
endsnippet

snippet cc "constructor call or setter body"
this.${1:var} = $1;
endsnippet

snippet list "Collections List" b
List<${1:String}> ${2:list} = new ${3:Array}List<>();
endsnippet

snippet map "Collections Map" b
Map<${1:String}, ${2:String}> ${3:map} = new ${4:Hash}Map<>();
endsnippet

snippet set "Collections Set" b
Set<${1:String}> ${2:set} = new ${3:Hash}Set<>();
endsnippet

snippet /Str?|str/ "String" br
String $0
endsnippet

snippet cn "Constructor" b
public `!p snip.rv = snip.basename or "untitled"`(${1:}) {
	$0
}
endsnippet

snippet cn "constructor, \w fields + assigments" b
	`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
}
endsnippet

snippet j.b "java_beans_" i
java.beans.
endsnippet

snippet j.i "java_io" i
java.io.
endsnippet

snippet j.m "java_math" i
java.math.
endsnippet

snippet j.n "java_net_" i
java.net.
endsnippet

snippet j.u "java_util_"  i
java.util.
endsnippet

snippet main "method (main)" b
public static void main(String[] args)`!p nl(snip)`{
	$0
}
endsnippet

snippet tryc "try/catch" b
try {
	$1${VISUAL}
} catch(${2:Exception} ${3:e}){
	${4:e.printStackTrace();}
}
endsnippet

snippet mt "method throws" b
${1:private} ${2:void} ${3:method}($4) ${5:throws $6 }{
	$0
}
endsnippet

snippet m  "method" b
${1:private} ${2:void} ${3:method}($4) {
	$0
}
endsnippet

snippet md "Method With javadoc" b
/**
 * ${7:Short Description}`!p
for i in getArgs(t[4]):
	snip.rv += "\n\t * @param " + i[1] + " usage..."`
 *`!p
if "throws" in t[5]:
	snip.rv = "\n\t * @throws " + t[6]
else:
	snip.rv = ""``!p
if not "void" in t[2]:
	snip.rv = "\n\t * @return object"
else:
	snip.rv = ""`
 **/
${1:public} ${2:void} ${3:method}($4) ${5:throws $6 }{
	$0
}
endsnippet

snippet /get(ter)?/ "getter" br
public ${1:String} get${2:Name}() {
	return `!p snip.rv = mixedCase(t[2])`;
}
endsnippet

snippet /set(ter)?/ "setter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet /se?tge?t|ge?tse?t|gs/ "setter and getter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}`!p snip.rv += "\n"`
public $2 get$1() {
	return `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet pa "package" b
package $0
endsnippet

snippet p "print" b
System.out.print($1);$0
endsnippet

snippet pl "println"  b
System.out.println(${1:${VISUAL:""}});$0
endsnippet

snippet pr "private" b
private $0
endsnippet

snippet prf "private final" b
private final $0
endsnippet

snippet prsf "private static final" b
private static final $0
endsnippet

snippet po "protected" b
protected $0
endsnippet

snippet pu "public" b
public $0
endsnippet

snippet re "return" b
return $0
endsnippet

snippet st "static"
static $0
endsnippet

snippet switch "switch" b
switch ($1)`!p nl(snip)`{
	case $2: $0
}
endsnippet

snippet sync "synchronized"
synchronized $0
endsnippet

snippet testCase "test case"
public class ${1:`!p snip.rv = snip.basename or "untitled"`} extends ${2:TestCase}`!p nl(snip)`{
	$0
}
endsnippet

snippet test "test" b
`!p junit(snip)`public void test${1:Name}() {
	$0
}
endsnippet

snippet testThrows "test throws" b
`!p junit(snip)`public void test${1:Name}() ${2:throws Exception }{
	$0
}
endsnippet

snippet throw "throw" b
throw new $0
endsnippet

snippet while "while" b
while ($1)`!p nl(snip)`{
	$0
}
endsnippet

snippet sw "SwingWorker"
new SwingWorker<${1:Void}, ${2:Void}>() {

	@Override
	public $1 doInBackground() {
		${VISUAL}
	}

}${3:.execute();};
endsnippet

snippet swd "SwingWorker"
new SwingWorker<${1:Void}, ${2:Void}>() {

	@Override
	public $1 doInBackground() {
		${VISUAL}
	}

	@Override
	public void done() {
	}

}${3:.execute();};
endsnippet

snippet curry "curry builder interface (1 property)" b
With${1:Value} with$1(${2:String} `!p snip.rv = mixedCase(t[1])`);

@FunctionalInterface
interface With$1 {
	${3:ReturnType} build();
}
endsnippet

snippet curry "curry builder interface (2 properties)" b
With${1:Value1} with$1(${2:String} `!p snip.rv = mixedCase(t[1])`);

@FunctionalInterface
interface With$1 {
	With${3:Value2} with$3(${4:String} `!p snip.rv = mixedCase(t[3])`);
}

@FunctionalInterface
interface With$3 {
	${6:ReturnType} build();
}
endsnippet

snippet curry "curry builder interface (3 properties)" b
With${1:Value1} with$1(${2:String} `!p snip.rv = mixedCase(t[1])`);

@FunctionalInterface
interface With$1 {
	With${3:Value2} with$3(${4:String} `!p snip.rv = mixedCase(t[3])`);
}

@FunctionalInterface
interface With$3 {
	With${5:Value3} with$5(${6:String} `!p snip.rv = mixedCase(t[5])`);
}

@FunctionalInterface
interface With$5 {
	${7:ReturnType} build();
}
endsnippet

snippet curry "curry builder interface (4 properties)" b
With${1:Value1} with$1(${2:String} `!p snip.rv = mixedCase(t[1])`);

@FunctionalInterface
interface With$1 {
	With${3:Value2} with$3(${4:String} `!p snip.rv = mixedCase(t[3])`);
}

@FunctionalInterface
interface With$3 {
	With${5:Value3} with$5(${6:String} `!p snip.rv = mixedCase(t[5])`);
}

@FunctionalInterface
interface With$5 {
	With${7:Value4} with$7(${8:String} `!p snip.rv = mixedCase(t[7])`);
}

@FunctionalInterface
interface With$7 {
	${10:ReturnType} build();
}
endsnippet

snippet curry "curry builder interface (5 properties)" b
With${1:Value1} with$1(${2:String} `!p snip.rv = mixedCase(t[1])`);

@FunctionalInterface
interface With$1 {
	With${3:Value2} with$3(${4:String} `!p snip.rv = mixedCase(t[3])`);
}

@FunctionalInterface
interface With$3 {
	With${5:Value3} with$5(${6:String} `!p snip.rv = mixedCase(t[5])`);
}

@FunctionalInterface
interface With$5 {
	With${7:Value4} with$7(${8:String} `!p snip.rv = mixedCase(t[7])`);
}

@FunctionalInterface
interface With$7 {
	With${9:Value5} with$9(${10:String} `!p snip.rv = mixedCase(t[9])`);
}

@FunctionalInterface
interface With$9 {
	${11:ReturnType} build();
}
endsnippet

snippet curry "curry builder interface (6 properties)" b
With${1:Value1} with$1(${2:String} `!p snip.rv = mixedCase(t[1])`);

@FunctionalInterface
interface With$1 {
	With${3:Value2} with$3(${4:String} `!p snip.rv = mixedCase(t[3])`);
}

@FunctionalInterface
interface With$3 {
	With${5:Value3} with$5(${6:String} `!p snip.rv = mixedCase(t[5])`);
}

@FunctionalInterface
interface With$5 {
	With${7:Value4} with$7(${8:String} `!p snip.rv = mixedCase(t[7])`);
}

@FunctionalInterface
interface With$7 {
	With${9:Value5} with$9(${10:String} `!p snip.rv = mixedCase(t[9])`);
}

@FunctionalInterface
interface With$9 {
	With${11:Value6} with$11(${12:String} `!p snip.rv = mixedCase(t[11])`);
}

@FunctionalInterface
interface With$11 {
	${13:ReturnType} build();
}
endsnippet

snippet builder "builder interface (1 property)" b
${1:`!p snip.rv = snip.basename or "InterfaceName"`} with${2:Value1}(${3:String} `!p snip.rv = mixedCase(t[2])`);

${4:ReturnType} build();
endsnippet

snippet builder "builder interface (2 properties)" b
${1:`!p snip.rv = snip.basename or "InterfaceName"`} with${2:Value1}(${3:String} `!p snip.rv = mixedCase(t[2])`);

$1 with${4:Value2}(${5:String} `!p snip.rv = mixedCase(t[4])`);

${5:ReturnType} build();
endsnippet

snippet opt "Option<VISUAL>"
Option<${VISUAL}>
endsnippet

snippet optl "Optional<VISUAL>"
Optional<${VISUAL}>
endsnippet

snippet vals "Validation<String, VISUAL>"
Validation<String, ${VISUAL}>
endsnippet

snippet try "Try<VISUAL>"
Try<${VISUAL}>
endsnippet

snippet tryof "Try.of(VISUAL)"
Try<${VISUAL}>
endsnippet
